/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import model.Mine;
import model.Node;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.OverlayLayout;

/**
 *
 * @author unalman
 */
public class PanelMineCreator extends javax.swing.JPanel {

    /**
     * Creates new form PanelMineCreator
     */
    private int heightMine;
    private int widthMine;
    private int cellsize;
    private int optionselected;
    private boolean paintable;
    private Node mapparttopaint;
    private Mine mine;

    public PanelMineCreator() {
        initComponents();
        cellsize = 25;
        optionselected = 0;
        paintable = false;
        setLayout(new OverlayLayout(this));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (mine != null) {
            Node current;
            for (int i = 0; i < heightMine; i++) {
                for (int j = 0; j < widthMine; j++) {
                    Rectangle space = new Rectangle(j * cellsize, i * cellsize, cellsize, cellsize);
                    current = new Node(space, i, j);
                    mine.addMapPart(current);
                    g.setColor(Color.BLACK);
                    g.drawRect(space.x, space.y, space.width, space.height);
                }
            }

        }
    }

    public int getHeightMine() {
        return heightMine;
    }

    public void setHeightMine(int h) {
        this.heightMine = h;
    }

    public int getWidthMine() {
        return widthMine;
    }

    public void setWidthMine(int w) {
        this.widthMine = w;
    }

    public void setRowsCol(int w, int h) {
        this.widthMine = w;
        this.heightMine = h;
        mine = new Mine(heightMine, widthMine);
        //this.matriz=new Matriz(ancho, alto);
    }

    private Node getClickedSpace(Point clickCoordinates) {
        Node n;
        for (int i = 0; i < widthMine; i++) {
            for (int j = 0; j < heightMine; j++) {
                if (mine.getMapNodeSpace(i, j).contains(clickCoordinates)) {
                    n = mine.getElementinPosition(i, j);
                    return n;
                }
            }
        }
        return null;
    }

    public int getOptionselected() {
        return optionselected;
    }

    public void setOptionselected(int optionselected) {
        this.optionselected = optionselected;
    }

    public boolean isPaintable() {
        return paintable;
    }

    public void setPaintable(boolean paintable) {
        this.paintable = paintable;
    }

    public void paintSpace(Node tobecolored) {
        if (tobecolored != null && paintable) {
            JLabel label = new JLabel();
            label.setBounds(tobecolored.getSpace());
            if (getComponentAt(tobecolored.getX(), tobecolored.getY()) != null) {
                remove(getComponentAt(tobecolored.getX(), tobecolored.getY()));
            }

            switch (optionselected) {
                case 0:
                    repaint(tobecolored.getSpace());
                    return;
                case 1:
                    label.setBackground(new Color(0, 0, 255, 100));
                    break;
                case 2:
                    label.setBackground(new Color(0, 255, 0, 100));
                    break;
                case 3:
                    label.setBackground(new Color(255, 255, 0, 100));
                    break;
                default:
                    label.setBackground(Color.BLACK);
                    break;
            }

            label.setOpaque(true);
            add(label);
            repaint();

        }
    }

    public Node getNode(int i, int j) {

        return mine.getElementinPosition(i, j);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        if (paintable) {
            mapparttopaint = getClickedSpace(evt.getPoint());
            if (mapparttopaint != null) {
                if (mapparttopaint.getCategory() == 0 && optionselected != 0) {

                    switch (optionselected) {
                        case 1: {
                            if (mine.getExit() == null) {
                                if (mapparttopaint.getX() == 0 || mapparttopaint.getY() == 0 || mapparttopaint.getX() == (mine.getMapX() - 1) || mapparttopaint.getY() == (mine.getMapY() - 1)) {
                                    mapparttopaint.setCategory(optionselected);
                                    paintSpace(mapparttopaint);
                                    mine.setExit(mapparttopaint);
                                    mine.addMapPart(mapparttopaint);
                                } else {
                                    System.out.println("La salida de la mina tiene que estar en sus extremos");
                                }
                            } else {
                                System.out.println("Una mina solo puede tener una salida");
                            }
                            break;

                        }
                        case 2: {
                            if (mine.getExit() != null) {
                                mapparttopaint.setCategory(optionselected);
                                //Oro metal por defecto temporalmente
                                mine.addDeposit(mapparttopaint, "Oro", 2);
                                paintSpace(mapparttopaint);
                                mine.addMapPart(mapparttopaint);
                            } else {
                                System.out.println("Para agregar dep√≥sitos debe existir una salida primero");
                            }
                            break;
                        }
                        case 3: {
                            mapparttopaint.setCategory(optionselected);
                            paintSpace(mapparttopaint);
                            mine.addMapPart(mapparttopaint);
                            break;

                        }
                    }
                }
            } else if (mapparttopaint.getCategory() != 0) {
                System.out.println("Ocupado");
            }

            System.out.println("" + mine.printMap());
        }

    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
