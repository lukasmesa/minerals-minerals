/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Rectangle;
import javax.swing.JButton;
import model.Mine;
import model.Minerals_SA;

/**
 * Insert class description here
 *
 * @author Lukas
 * @version Feb 4, 2018
 */
public class PanelMainFrame extends javax.swing.JPanel {

    private Minerals_SA minerals;
    private int cellSize;
    private int mineLocationX;
    private int mineLocationY;
    GridLayout grid;

    /**
     * Creates new form PanelMainFrame
     */
    public PanelMainFrame() {
        this.minerals = new Minerals_SA();
        this.cellSize = 0;
        this.mineLocationX = 1;
        this.mineLocationY = 1;
        this.grid = new GridLayout(0, 3);
        initComponents();
        this.setLayout(grid);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the minerals
     */
    public Minerals_SA getMinerals() {
        return minerals;
    }

    /**
     * @param minerals the minerals to set
     */
    public void setMinerals(Minerals_SA minerals) {
        this.minerals = minerals;
    }

    /**
     * @return the cellSize
     */
    public int getCellSize() {
        return cellSize;
    }

    /**
     * @param cellSize the cellSize to set
     */
    public void setCellSize(int cellSize) {
        this.cellSize = cellSize;
    }

    @Override
    public void paintComponents(Graphics grphcs) {
        super.paintComponents(grphcs); //To change body of generated methods, choose Tools | Templates.
        System.out.println(getMinerals().getMines().size());
        if (getMinerals() != null) {
            int gridRows = 0;
            if (getMinerals().getMines().size() > 0) {
                System.out.println("paintMinas");
                this.add(new JButton("boton"));
                for (Mine mine : getMinerals().getMines()) {
                    if (mine != null) {
                        for (int i = 0; i < mine.getMapX(); i++) {
                            for (int j = 0; j < mine.getMapY(); j++) {
                                switch (mine.getElementinPosition(i, j).getCategory()) {
                                    case 0:
                                        grphcs.setColor(Color.BLACK);
                                        grphcs.drawRect(mine.getElementinPosition(i, j).getSpace().x, mine.getElementinPosition(i, j).getSpace().y, mine.getElementinPosition(i, j).getSpace().width, mine.getElementinPosition(i, j).getSpace().height);
                                        break;
                                    case 1:
                                        grphcs.setColor(new Color(0, 0, 255, 100));
                                        grphcs.drawRect(mine.getElementinPosition(i, j).getSpace().x, mine.getElementinPosition(i, j).getSpace().y, mine.getElementinPosition(i, j).getSpace().width, mine.getElementinPosition(i, j).getSpace().height);
                                        break;
                                    case 2:
                                        grphcs.setColor(new Color(0, 255, 0, 100));
                                        grphcs.drawRect(mine.getElementinPosition(i, j).getSpace().x, mine.getElementinPosition(i, j).getSpace().y, mine.getElementinPosition(i, j).getSpace().width, mine.getElementinPosition(i, j).getSpace().height);
                                        break;
                                    case 3:
                                        grphcs.setColor(new Color(255, 255, 0, 100));
                                        grphcs.drawRect(mine.getElementinPosition(i, j).getSpace().x, mine.getElementinPosition(i, j).getSpace().y, mine.getElementinPosition(i, j).getSpace().width, mine.getElementinPosition(i, j).getSpace().height);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                mineLocationX++;
                mineLocationY++;
                repaint();
            }
        }
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
